AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template to set up VPC, Subnets, Security Groups, ECR, and ECS
  cluster
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: my-vpc
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: us-east-1a
      Tags:
      - Key: Name
        Value: my-public-subnet-1
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: us-east-1b
      Tags:
      - Key: Name
        Value: my-public-subnet-2
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: my-internet-gateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: my-route-table
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: RouteTable
  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: RouteTable
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '0.0.0.0/0'
      Tags:
      - Key: Name
        Value: my-security-group
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: my-ecr-repo
      LifecyclePolicy:
        LifecyclePolicyText: "{\n  \"rules\": [\n    {\n      \"rulePriority\": 1,\n\
          \      \"description\": \"Expire images older than 30 days\",\n      \"\
          selection\": {\n        \"tagStatus\": \"any\",\n        \"countType\":\
          \ \"sinceImagePushed\",\n        \"countUnit\": \"days\",\n        \"countNumber\"\
          : 30\n      },\n      \"action\": {\n        \"type\": \"expire\"\n    \
          \  }\n    }\n  ]\n}\n"
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: my-ecs-cluster
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ecs:*
            - ecr:*
            - logs:*
            Resource: '*'
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: ecs-execution
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - ecr:GetAuthorizationToken
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ECSCluster
    Properties:
      Cluster:
        Ref: ECSCluster
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition:
        Ref: ECSTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
          - Ref: PublicSubnet1
          - Ref: PublicSubnet2
          SecurityGroups:
          - Ref: SecurityGroup
          AssignPublicIp: ENABLED
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: my-task-definition
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn:
        Fn::GetAtt:
        - ECSExecutionRole
        - Arn
      ContainerDefinitions:
      - Name: my-container
        Image:
          Fn::Sub: ${ECRRepository}.dkr.ecr.${AWS::Region}.amazonaws.com/my-ecr-repo:latest
        PortMappings:
        - ContainerPort: 80
          HostPort: 80
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: /ecs/my-container
            awslogs-region:
              Ref: AWS::Region
            awslogs-stream-prefix: ecs
Outputs:
  ECRRepositoryUri:
    Description: URI of the ECR repository
    Value:
      Fn::GetAtt:
      - ECRRepository
      - RepositoryUri
  ECSClusterName:
    Description: Name of the ECS Cluster
    Value:
      Ref: ECSCluster
  VpcId:
    Description: VPC ID
    Value:
      Ref: VPC
  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value:
      Ref: PublicSubnet1
  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value:
      Ref: PublicSubnet2
  SecurityGroupId:
    Description: Security Group ID
    Value:
      Ref: SecurityGroup
